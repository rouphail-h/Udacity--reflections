When would you want to use a remote repository rather than keeping all your work
local?
well, in some cases when you are working online from another computer, or may
be if you are sending your work to a colleague and want him to see it or edit it.
or may be it is just easier, specially if it is just a plain text file.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
may be these changes are done by someone else, may they need to be reviewed
first before to be added to my own project.
but indeed in many cases, i would think it is ok to have the changes updated
automatically to my own computer, since we have this kind of version control
so it would be ok to have the changes updated automatically.

Describe the differences between forks, clones, and branches. When would you
use one instead of another?
forks is used on the website, Github, it is used when you need to copy a
repository from someone to your own page.
clone is creating a copy (image), from the web to your machine, or from a
machine to another machine. it is the same concept as fork, but just the term
'fork' is applied by Github.
branches is adding a new path to your version of modifications, it is like
doing some modifications but in another path different than the main one,
like if you are doing experiments or some fancy trials, and you dont want to
affect your original work.
they 3 are different concepts and they are used in different situations indeed.

What is the benefit of having a copy of the last known state of the remote
stored locally?
if it is a program, you may need to run it , so you would need it on your machine
also, you may need to work on it while offline, or you are out of connection.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
i could make the modifications and send them via email to my colleague, or
on a usb device.
of course , it is a lot easier using Git and GitHub.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?
I think it is better to work on a branch than on the master, at least it gives
others the opportunity to review your changes before incorporating them into
the main file, and in case they have any problems, like bugs or others, they don't
affect the main work, but leaving it intact.
Well, you work directly on the master, mainly if you are the main developer on 
the project, so you are working on the core items, in other cases, if you are
doing minor changes related to the core work of the master branch, otherwise,
get your work first in a branch, before merging it to the master.
